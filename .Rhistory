}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
if (cond_var_type == 1) {
sigma2 <-  abs(mu)^6
} else if (cond_var_type == 2) {
sigma2 <-  abs(rowMeans(X))^6
}
sigma2 <-  sigma_range[1] +  sigma_range[2] * (sigma2 - min(sigma2))/(diff(range(sigma2)))
# biomarker
Y <- rnorm(n, mu, sigma2)
library(data.table)
lower <- qnorm(0.05, mu, sigma2)
upper <-  qnorm(0.95, mu, sigma2)
lower <- mu  + quantile(Y - mu, 0.05)
upper <- mu  + quantile(Y - mu, 0.95)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
# potential outcomes being indicator of death
thresh_upper <- quantile(Y, 0.8)
thresh_lower <- quantile(Y, 0.2)
eta <-  -1 + 2*rowMeans(sqrt(X) + cos(4*sqrt(X)))
# treated, treating helps so long as blood-pressure is above threshold.
Z  <- rbinom(n, 1, plogis(eta))
# treat if extreme
# two treatments based on extreme or nonextreme biomarker.
# assigning the wrong treatment imp;ies death
Z0 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, 1,
Z)
#
Z1 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, Z,
1)
df <- data.table(lower, upper, mu, Z0, Z1, Y)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= thresh_lower) * 1 * (upper <= thresh_upper)
return(treatment)
}
df$A <- treatment_rule(df$mu, df$lower, df$upper)
df$Atrue <- 1- 1*(df$Y >= thresh_lower) * 1 * (df$Y <= thresh_upper)
mean(df$Z1)
mean(df$Z0)
mean(df$Z1 * df$A + df$Z0 * (1 - df$A))
mean(df$Z1 * df$Atrue + df$Z0 * (1 - df$Atrue))
d <- 10
n <- 1000
cond_var_type <- 1
distr_shift <- F
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
if (cond_var_type == 1) {
sigma2 <-  abs(mu)^6
} else if (cond_var_type == 2) {
sigma2 <-  abs(rowMeans(X))^6
}
sigma2 <-  sigma_range[1] +  sigma_range[2] * (sigma2 - min(sigma2))/(diff(range(sigma2)))
# biomarker
Y <- rnorm(n, mu, sigma2)
library(data.table)
lower <- qnorm(0.05, mu, sigma2)
upper <-  qnorm(0.95, mu, sigma2)
#lower <- mu  + quantile(Y - mu, 0.05)
#upper <- mu  + quantile(Y - mu, 0.95)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
# potential outcomes being indicator of death
thresh_upper <- quantile(Y, 0.8)
thresh_lower <- quantile(Y, 0.2)
eta <-  -1 + 2*rowMeans(sqrt(X) + cos(4*sqrt(X)))
# treated, treating helps so long as blood-pressure is above threshold.
Z  <- rbinom(n, 1, plogis(eta))
# treat if extreme
# two treatments based on extreme or nonextreme biomarker.
# assigning the wrong treatment imp;ies death
Z0 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, 1,
Z)
#
Z1 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, Z,
1)
df <- data.table(lower, upper, mu, Z0, Z1, Y)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= thresh_lower) * 1 * (upper <= thresh_upper)
return(treatment)
}
df$A <- treatment_rule(df$mu, df$lower, df$upper)
df$Atrue <- 1- 1*(df$Y >= thresh_lower) * 1 * (df$Y <= thresh_upper)
mean(df$Z1)
mean(df$Z0)
mean(df$Z1 * df$A + df$Z0 * (1 - df$A))
mean(df$Z1 * df$Atrue + df$Z0 * (1 - df$Atrue))
d <- 10
n <- 1000
cond_var_type <- 1
distr_shift <- F
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
if (cond_var_type == 1) {
sigma2 <-  abs(mu)^6
} else if (cond_var_type == 2) {
sigma2 <-  abs(rowMeans(X))^6
}
sigma2 <-  sigma_range[1] +  sigma_range[2] * (sigma2 - min(sigma2))/(diff(range(sigma2)))
# biomarker
Y <- rnorm(n, mu, sigma2)
library(data.table)
lower <- qnorm(0.05, mu, sigma2)
upper <-  qnorm(0.95, mu, sigma2)
#lower <- mu  + quantile(Y - mu, 0.05)
#upper <- mu  + quantile(Y - mu, 0.95)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
# potential outcomes being indicator of death
thresh_upper <- quantile(Y, 0.8)
thresh_lower <- quantile(Y, 0.2)
eta <-  -1 + 2*rowMeans(sqrt(X) + cos(4*sqrt(X)))
# treated, treating helps so long as blood-pressure is above threshold.
Z  <- rbinom(n, 1, plogis(eta))
# treat if extreme
# two treatments based on extreme or nonextreme biomarker.
# assigning the wrong treatment imp;ies death
Z0 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, 1,
Z)
#
Z1 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, Z,
1)
df <- data.table(lower, upper, mu, Z0, Z1, Y)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= thresh_lower) * 1 * (upper <= thresh_upper)
return(treatment)
}
df$A <- treatment_rule(df$mu, df$lower, df$upper)
df$Atrue <- 1- 1*(df$Y >= thresh_lower) * 1 * (df$Y <= thresh_upper)
mean(df$Z1)
mean(df$Z0)
mean(df$Z1 * df$A + df$Z0 * (1 - df$A))
mean(df$Z1 * df$Atrue + df$Z0 * (1 - df$Atrue))
d <- 10
n <- 1000
cond_var_type <- 1
distr_shift <- F
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
if (cond_var_type == 1) {
sigma2 <-  abs(mu)^6
} else if (cond_var_type == 2) {
sigma2 <-  abs(rowMeans(X))^6
}
sigma2 <-  sigma_range[1] +  sigma_range[2] * (sigma2 - min(sigma2))/(diff(range(sigma2)))
# biomarker
Y <- rnorm(n, mu, sigma2)
library(data.table)
lower <- qnorm(0.05, mu, sigma2)
upper <-  qnorm(0.95, mu, sigma2)
#lower <- mu  + quantile(Y - mu, 0.05)
#upper <- mu  + quantile(Y - mu, 0.95)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
# potential outcomes being indicator of death
thresh_upper <- quantile(Y, 0.8)
thresh_lower <- quantile(Y, 0.2)
eta <-  -1 + 2*rowMeans(sqrt(X) + cos(4*sqrt(X)))
# treated, treating helps so long as blood-pressure is above threshold.
Z  <- rbinom(n, 1, plogis(eta))
# treat if extreme
# two treatments based on extreme or nonextreme biomarker.
# assigning the wrong treatment imp;ies death
Z0 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, 1,
Z)
#
Z1 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, Z,
1)
df <- data.table(lower, upper, mu, Z0, Z1, Y)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= thresh_lower) * 1 * (upper <= thresh_upper)
return(treatment)
}
df$A <- treatment_rule(df$mu, df$lower, df$upper)
df$Atrue <- 1- 1*(df$Y >= thresh_lower) * 1 * (df$Y <= thresh_upper)
mean(df$Z1)
mean(df$Z0)
mean(df$Z1 * df$A + df$Z0 * (1 - df$A))
mean(df$Z1 * df$Atrue + df$Z0 * (1 - df$Atrue))
d <- 10
n <- 1000
cond_var_type <- 1
distr_shift <- F
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
if (cond_var_type == 1) {
sigma2 <-  abs(mu)^6
} else if (cond_var_type == 2) {
sigma2 <-  abs(rowMeans(X))^6
}
sigma2 <-  sigma_range[1] +  sigma_range[2] * (sigma2 - min(sigma2))/(diff(range(sigma2)))
# biomarker
Y <- rnorm(n, mu, sigma2)
library(data.table)
lower <- qnorm(0.05, mu, sigma2)
upper <-  qnorm(0.95, mu, sigma2)
lower <- mu  + quantile(Y - mu, 0.05)
upper <- mu  + quantile(Y - mu, 0.95)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
# potential outcomes being indicator of death
thresh_upper <- quantile(Y, 0.8)
thresh_lower <- quantile(Y, 0.2)
eta <-  -1 + 2*rowMeans(sqrt(X) + cos(4*sqrt(X)))
# treated, treating helps so long as blood-pressure is above threshold.
Z  <- rbinom(n, 1, plogis(eta))
# treat if extreme
# two treatments based on extreme or nonextreme biomarker.
# assigning the wrong treatment imp;ies death
Z0 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, 1,
Z)
#
Z1 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, Z,
1)
df <- data.table(lower, upper, mu, Z0, Z1, Y)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= thresh_lower) * 1 * (upper <= thresh_upper)
return(treatment)
}
df$A <- treatment_rule(df$mu, df$lower, df$upper)
df$Atrue <- 1- 1*(df$Y >= thresh_lower) * 1 * (df$Y <= thresh_upper)
mean(df$Z1)
mean(df$Z0)
mean(df$Z1 * df$A + df$Z0 * (1 - df$A))
mean(df$Z1 * df$Atrue + df$Z0 * (1 - df$Atrue))
d <- 10
n <- 1000
cond_var_type <- 1
distr_shift <- F
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
if (cond_var_type == 1) {
sigma2 <-  abs(mu)^6
} else if (cond_var_type == 2) {
sigma2 <-  abs(rowMeans(X))^6
}
sigma2 <-  sigma_range[1] +  sigma_range[2] * (sigma2 - min(sigma2))/(diff(range(sigma2)))
# biomarker
Y <- rnorm(n, mu, sigma2)
library(data.table)
lower <- qnorm(0.05, mu, sigma2)
upper <-  qnorm(0.95, mu, sigma2)
lower <- mu  + quantile(Y - mu, 0.05)
upper <- mu  + quantile(Y - mu, 0.95)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
# potential outcomes being indicator of death
thresh_upper <- quantile(Y, 0.8)
thresh_lower <- quantile(Y, 0.2)
eta <-  -1 + 2*rowMeans(sqrt(X) + cos(4*sqrt(X)))
# treated, treating helps so long as blood-pressure is above threshold.
Z  <- rbinom(n, 1, plogis(eta))
# treat if extreme
# two treatments based on extreme or nonextreme biomarker.
# assigning the wrong treatment imp;ies death
Z0 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, 1,
Z)
#
Z1 <- ifelse(Y >= thresh_upper | Y <= thresh_lower, Z,
1)
df <- data.table(lower, upper, mu, Z0, Z1, Y)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= thresh_lower) * 1 * (upper <= thresh_upper)
return(treatment)
}
df$A <- treatment_rule(df$mu, df$lower, df$upper)
df$Atrue <- 1- 1*(df$Y >= thresh_lower) * 1 * (df$Y <= thresh_upper)
mean(df$Z1)
mean(df$Z0)
mean(df$Z1 * df$A + df$Z0 * (1 - df$A))
mean(df$Z1 * df$Atrue + df$Z0 * (1 - df$Atrue))
results
n <- 1000
d <- 5
shape <- 3
distr_shift <- T
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
sigma2 <-  abs(mu)^6
a <- sigma_range[1] - sigma_range[2] / (diff(range(sigma2))) * (min(sigma2))
b <-  sigma_range[2] /(diff(range(sigma2)))
sigma2 <-  a + b * sigma2
a
b
sqrt(0.0025)
mean(sigma2)
sqrt(0.02)
mu <-    rowMeans(X + sin(4*X))
sigma_range <- c(0.05, 0.4)^2
sigma2 <-  abs(mu)^6
a <- 0.0025
b <-  0.02216758 #sigma_range[2] /(diff(range(sigma2)))
sigma2 <-  0.02  + b * (sigma2 - 0.02)
quantile(sigma2)
quantile(sqrt(sigma2))
quantile(abs(mu)^6)
quantile(abs(mu)^3)
sigma_range <- c(0.05, 0.4)^2
sigma2 <-  abs(mu)^6
quantile(abs(mu)^3)
sigma2 <-  0.02  + b * (sigma2 - 0.02)
sigma2
quantile(sigma2)
quantile(sqrt(sigma2))
b
mean(sigma2)
plot(mu, sigma2)
b <- 0
sigma2 <-  0.02  + b * (sigma2 - 0.02)
# biomarker
Y <- rnorm(n, mu, sigma2)
plot(mu, sigma2)
quantile(sigma2)
quantile( abs(mu)^6)
quantile(sqrt(abs(mu)^6))
1/b
1/0.02216758
b <- 1
quantile(sqrt(0.02 + b * abs(mu)^6 / 20))
quantile(sqrt(0.02 + 0.5 * abs(mu)^6 / 20))
quantile(sqrt(0.02 + 0.2 * abs(mu)^6 / 20))
quantile(sqrt(0.02 + 0.1 * abs(mu)^6 / 20))
b <- 1
quantile( 0.02 + b * ( abs(mu)^6 / 20 - 0.02))
plot(mu,  0.02 + b * ( abs(mu)^6 / 20 - 0.02))
plot(mu,  0.0025 + b * ( abs(mu)^6 / 20 - 0.02))
plot(mu, sqrt() 0.0025 + b * ( abs(mu)^6 / 20 - 0.02)))
plot(mu, sqrt( 0.0025) + b * ( abs(mu)^6 / 20 - 0.02)))
plot(mu, sqrt( 0.0025 + b * ( abs(mu)^6 / 20 - 0.02)))
plot(mu, sqrt( 0.025 + b * ( abs(mu)^6 / 20 - 0.02)))
plot(mu, sqrt( 0.025 + b * ( abs(mu)^6 / 20 - 0.02)))
quantile(sqrt( 0.025 + b * ( abs(mu)^6 / 20 - 0.02)))
quantile(sqrt( 0.025 + b * ( abs(mu)^6 / 20 - 0.02)))
sqrt(0.025)
0.02216758 * 20
b <- 1
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.025 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
plot(mu, sqrt(sigma2))
plot(mu, Y)
b <- 0.5
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.025 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 0
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.025 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 1
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 0.05
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 0.5
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.025 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
