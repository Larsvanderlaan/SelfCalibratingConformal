if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 1
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 0.05
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
b <- 0.5
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
# covariates
X <- as.matrix(replicate(d, runif(n, 0, 1)))
if(distr_shift) {
X <- as.matrix(replicate(d, rbeta(n, 1, shape)))
}
colnames(X) <- paste0("X", 1:d)
# biomarker mean and variance
mu <-    rowMeans(X + sin(4*X))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.025 + b * ( abs(mu)^6 / 20 - 0.02)
Y <- rnorm(n, mu, sigma2)
#Y <- qs[findInterval(Y, qs, all.inside = TRUE)]
median(Y)
plot(mu, Y)
source("~/repositories/conformal/scripts/run_sims.R")
source("~/repositories/conformal/scripts/run_sims.R")
plot_curves <- function(n, b = 0.5) {
library(ggplot2)
alpha <- 0.1
lrnr <- Lrnr_gam$new()
data_list <- generate_data_splits(1000,  n, n_test = 100, d = 1, distr_shift = TRUE, shape = 1, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
predictor <- function(X) {
}
#
preds_bin <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 10)
preds_bin2 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 5)
preds_iso <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = iso_calibrator)
preds_cond <- do_conformal_conditional(X_cal, Y_cal, X_test, predictor, alpha = alpha, lambd = 0.00001)
preds_marg <- do_conformal_marginal(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_bin$method <- "binning"
preds_bin2$method <- "binning2"
preds_iso$method <- "isotonic"
preds_cond$method <- "conditional"
preds_marg$method <- "marginal"
preds_oracle <- copy(preds_cond)
preds_oracle$f <- data_test$mu
preds_oracle$lower <- qnorm(0.05, data_test$mu, data_test$sigma2)
preds_oracle$upper <- qnorm(0.95, data_test$mu, data_test$sigma2)
preds_oracle$method <- "oracle"
all_preds <- rbindlist(list(preds_iso, preds_cond, preds_marg))
#all_preds <- preds_cond
all_preds$X <- rep(as.vector(X_test), nrow(all_preds) / nrow(X_test))
preds_oracle$X <- as.vector(X_test)
preds_oracle$method <- NULL
library(ggplot2)
fwrite(all_preds, file = paste0("plots/curves_", n, "_", b, ".csv"))
plt <- ggplot(all_preds, aes(x = X, color = method)) +
geom_step(aes(y = lower))  +
geom_step(aes(y = upper)) +
geom_line(data = preds_oracle, aes(x = X, y = lower), color = "black", alpha = 0.5)  +
geom_line(data = preds_oracle, aes(x = X, y = upper), color = "black", alpha = 0.5) +
theme(legend.position="bottom") + theme_bw()
ggsave(plot = plt, filename =  paste0("plots/curves_", n, "_", b, ".pdf") )
return(plt)
}
plt1 <- plot_curves(50)
plt2 <- plot_curves(100)
plt3 <- plot_curves(250)
plt4 <- plot_curves(500)
plt4 <- plot_curves(1000)
plot_curves <- function(n, b = 0.5) {
library(ggplot2)
alpha <- 0.1
lrnr <- Lrnr_gam$new()
data_list <- generate_data_splits(1000,  n, n_test = 100, d = 1, distr_shift = TRUE, shape = 1, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
#
preds_bin <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 10)
preds_bin2 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 5)
preds_iso <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = iso_calibrator)
preds_cond <- do_conformal_conditional(X_cal, Y_cal, X_test, predictor, alpha = alpha, lambd = 0.00001)
preds_marg <- do_conformal_marginal(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_bin$method <- "binning"
preds_bin2$method <- "binning2"
preds_iso$method <- "isotonic"
preds_cond$method <- "conditional"
preds_marg$method <- "marginal"
preds_oracle <- copy(preds_cond)
preds_oracle$f <- data_test$mu
preds_oracle$lower <- qnorm(0.05, data_test$mu, data_test$sigma2)
preds_oracle$upper <- qnorm(0.95, data_test$mu, data_test$sigma2)
preds_oracle$method <- "oracle"
all_preds <- rbindlist(list(preds_iso, preds_cond, preds_marg))
#all_preds <- preds_cond
all_preds$X <- rep(as.vector(X_test), nrow(all_preds) / nrow(X_test))
preds_oracle$X <- as.vector(X_test)
preds_oracle$method <- NULL
library(ggplot2)
fwrite(all_preds, file = paste0("plots/curves_", n, "_", b, ".csv"))
plt <- ggplot(all_preds, aes(x = X, color = method)) +
geom_step(aes(y = lower))  +
geom_step(aes(y = upper)) +
geom_line(data = preds_oracle, aes(x = X, y = lower), color = "black", alpha = 0.5)  +
geom_line(data = preds_oracle, aes(x = X, y = upper), color = "black", alpha = 0.5) +
theme(legend.position="bottom") + theme_bw()
ggsave(plot = plt, filename =  paste0("plots/curves_", n, "_", b, ".pdf") )
return(plt)
}
plt1 <- plot_curves(50)
plt2 <- plot_curves(100)
plt3 <- plot_curves(250)
plt4 <- plot_curves(500)
plt4 <- plot_curves(1000)
mu <-    rowMeans(X_test + sin(4*X_test))
#sigma_range <- c(0.05, 0.4)^2
sigma2 <-  0.03+ b * ( abs(mu)^6 / 20 - 0.02)
lower <- qnorm(alpha/2, mu, sigma2)
upper <- qnorm(1 - alpha/2, mu, sigma2)
cf_preds <- data.table(f = predictor(X_test),
lower = lower,
upper = upper,
width = upper - lower)
source("~/repositories/conformal/scripts/run_sims.R")
source("~/repositories/conformal/scripts/run_sims.R")
run_sim_once(100, Lrnr_gam$new(), 1, 0.1, 1, n_test = 10, b = 0.5) {
run_sim_once(100, Lrnr_gam$new(), 1, 0.1, 1, n_test = 10, b = 0.5)
source("~/repositories/conformal/scripts/run_sims.R")
run_sim_once(100, Lrnr_gam$new(), 1, 0.1, 1, n_test = 10, b = 0.5)
source("~/repositories/conformal/scripts/sim_helpers.R")
source("~/repositories/conformal/scripts/run_sims.R")
run_sim_once(100, Lrnr_gam$new(), 1, 0.1, 1, n_test = 10, b = 0.data_test
run_sim_once(100, Lrnr_gam$new(), 1, 0.1, 1, n_test = 10, b = 0.5)
source("~/repositories/conformal/scripts/sim_helpers.R")
source("~/repositories/conformal/scripts/run_sims.R")
run_sim_once(100, Lrnr_gam$new(), 1, 0.1, 1, n_test = 10, b = 0.5)
X_cal
source("~/repositories/conformal/scripts/sim_helpers.R")
n_train <- 100
n_test = 100
b = 0.5
lrnr <- Lrnr_gam$new()
d <- 1
alpha <- 0.1
shape <- 1
data_list <- generate_data_splits(n_train, n_train, n_test, d = d, distr_shift = TRUE, shape = shape, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
preds_oracle <- do_conformal_oracle(X_cal, Y_cal, X_test, predictor, alpha = alpha, data_test = data_test)
print("histogram binning")
preds_bin_10 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 10)
preds_bin_5 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 5)
print("mondrian")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
preds_mondrian_5 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 5)
print("iso")
preds_iso <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = iso_calibrator)
print("conditional")
preds_cond <- do_conformal_conditional(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_marg <- do_conformal_marginal(X_cal, Y_cal, X_test, predictor, alpha = alpha)
dim(preds_oracle)
preds_oracle
source("~/repositories/conformal/scripts/sim_helpers.R")
preds_oracle <- do_conformal_oracle(X_cal, Y_cal, X_test, predictor, alpha = alpha, data_test = data_test)
names(preds_oracle)
source("~/repositories/conformal/scripts/run_sims.R")
data_list <- generate_data_splits(n_train, n_train, n_test, d = d, distr_shift = TRUE, shape = shape, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
preds_oracle <- do_conformal_oracle(X_cal, Y_cal, X_test, predictor, alpha = alpha, data_test = data_test)
print("histogram binning")
preds_bin_10 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 10)
preds_bin_5 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 5)
print("mondrian")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
preds_mondrian_5 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 5)
print("iso")
preds_iso <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = iso_calibrator)
print("conditional")
preds_cond <- do_conformal_conditional(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_marg <- do_conformal_marginal(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_oracle$method <- "oracle"
preds_bin_10$method <- "cal_binning_10"
preds_bin_5$method <- "cal_binning_5"
preds_iso$method <- "isotonic"
preds_cond$method <- "conditional"
preds_marg$method <- "marginal"
preds_mondrian_5$method <- "mondrian_10"
preds_mondrian_10$method <- "mondrian_5"
all_preds <- rbindlist(list(preds_oracle, preds_bin_10, preds_bin_5, preds_mondrian_10, preds_mondrian_5, preds_iso, preds_cond, preds_marg))
nmethod <- nrow(all_preds) / nrow(preds_bin_10)
all_preds$mu <- rep(data_test$mu, nmethod)
all_preds$Y <- rep(Y_test, nmethod)
all_preds$Z1 <- rep(data_test$Z1, nmethod)
all_preds$Z0 <- rep(data_test$Z0, nmethod)
threshold_upper <- quantile(data_train$Y, 0.8)
threshold_lower <- quantile(data_train$Y, 0.2)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= threshold_lower) * 1 * (upper <= threshold_upper)
return(treatment)
}
all_preds$A <- treatment_rule(all_preds$f, all_preds$lower, all_preds$upper)
all_preds$Y <- rep(data_test$Y , nmethod)
# Extract bins for differences in the conditional variance.
sigma2 <- data_test$sigma2
bins_hetero <- findInterval(sigma2, quantile(sigma2, seq(0, 1 , length = 6)), all.inside = TRUE)
all_preds$bin <- rep(bins_hetero, nmethod)
setkey(all_preds, method, bin)
print(dim(all_preds))
all_preds <- all_preds[!is.na(all_preds$lower) & !is.na(all_preds$upper),]
print(dim(all_preds))
results_by_hetero <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
)
, by = c("method","bin")]
results_marginal <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
),
, by = c("method")]
results_marginal$bin <- "marginal"
results_marginal <- results_marginal[, names(results_by_hetero), with = FALSE]
results <- rbindlist(list(results_marginal, results_by_hetero))
setkey(results, bin, method)
results
preds_mondrian_10$width
preds_mondrian_5$width
results
n_train <- 1000
n_test <- 100
#lrnr <- Lrnr_gam$new()
data_list <- generate_data_splits(n_train, n_train, n_test, d = d, distr_shift = TRUE, shape = shape, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
preds_oracle <- do_conformal_oracle(X_cal, Y_cal, X_test, predictor, alpha = alpha, data_test = data_test)
print("histogram binning")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
source("~/repositories/conformal/scripts/run_sims.R")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
preds_mondrian_10$width
preds_mondrian_5 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 5)
preds_mondrian_5$width
source("~/repositories/conformal/scripts/run_sims.R")
#Lrnr_xgboost$new(max_depth = max_depth)
#lrnr <- Lrnr_gam$new()
data_list <- generate_data_splits(n_train, n_train, n_test, d = d, distr_shift = TRUE, shape = shape, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
preds_oracle <- do_conformal_oracle(X_cal, Y_cal, X_test, predictor, alpha = alpha, data_test = data_test)
print("histogram binning")
preds_bin_10 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 10)
preds_bin_5 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 5)
print("mondrian")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
preds_mondrian_5 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 5)
print("iso")
preds_iso <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = iso_calibrator)
print("conditional")
preds_cond <- do_conformal_conditional(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_marg <- do_conformal_marginal(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_oracle$method <- "oracle"
preds_bin_10$method <- "cal_binning_10"
preds_bin_5$method <- "cal_binning_5"
preds_iso$method <- "isotonic"
preds_cond$method <- "conditional"
preds_marg$method <- "marginal"
preds_mondrian_5$method <- "mondrian_10"
preds_mondrian_10$method <- "mondrian_5"
all_preds <- rbindlist(list(preds_oracle, preds_bin_10, preds_bin_5, preds_mondrian_10, preds_mondrian_5, preds_iso, preds_cond, preds_marg))
nmethod <- nrow(all_preds) / nrow(preds_bin_10)
all_preds$mu <- rep(data_test$mu, nmethod)
all_preds$Y <- rep(Y_test, nmethod)
all_preds$Z1 <- rep(data_test$Z1, nmethod)
all_preds$Z0 <- rep(data_test$Z0, nmethod)
threshold_upper <- quantile(data_train$Y, 0.8)
threshold_lower <- quantile(data_train$Y, 0.2)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= threshold_lower) * 1 * (upper <= threshold_upper)
return(treatment)
}
all_preds$A <- treatment_rule(all_preds$f, all_preds$lower, all_preds$upper)
all_preds$Y <- rep(data_test$Y , nmethod)
# Extract bins for differences in the conditional variance.
sigma2 <- data_test$sigma2
bins_hetero <- findInterval(sigma2, quantile(sigma2, seq(0, 1 , length = 6)), all.inside = TRUE)
all_preds$bin <- rep(bins_hetero, nmethod)
setkey(all_preds, method, bin)
print(dim(all_preds))
all_preds <- all_preds[!is.na(all_preds$lower) & !is.na(all_preds$upper),]
print(dim(all_preds))
results_by_hetero <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
)
, by = c("method","bin")]
results_marginal <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
),
, by = c("method")]
results_marginal$bin <- "marginal"
results_marginal <- results_marginal[, names(results_by_hetero), with = FALSE]
results <- rbindlist(list(results_marginal, results_by_hetero))
setkey(results, bin, method)
results
n_train
n_train <- 200
n_test <- 100
data_list <- generate_data_splits(n_train, n_train, n_test, d = d, distr_shift = TRUE, shape = shape, b = b)
data_train <- data_list$data_train; data_cal <- data_list$data_cal; data_test <- data_list$data_test
X_train <- data_train$X; X_cal <- data_cal$X; X_test <- data_test$X
Y_train <- data_train$Y; Y_cal <- data_cal$Y; Y_test <- data_test$Y
# get predictor using learning algorithm specified by lrnr
predictor <- train_predictor(X_train, Y_train, lrnr)
preds_oracle <- do_conformal_oracle(X_cal, Y_cal, X_test, predictor, alpha = alpha, data_test = data_test)
print("histogram binning")
preds_bin_10 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 10)
preds_bin_5 <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = binning_calibrator, nbin = 5)
print("mondrian")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
preds_mondrian_5 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 5)
print("iso")
preds_iso <- do_conformal_calibration(X_cal, Y_cal, X_test, predictor, alpha = alpha, calibrator = iso_calibrator)
print("conditional")
preds_cond <- do_conformal_conditional(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_marg <- do_conformal_marginal(X_cal, Y_cal, X_test, predictor, alpha = alpha)
preds_oracle$method <- "oracle"
preds_bin_10$method <- "cal_binning_10"
preds_bin_5$method <- "cal_binning_5"
preds_iso$method <- "isotonic"
preds_cond$method <- "conditional"
preds_marg$method <- "marginal"
preds_mondrian_5$method <- "mondrian_10"
preds_mondrian_10$method <- "mondrian_5"
all_preds <- rbindlist(list(preds_oracle, preds_bin_10, preds_bin_5, preds_mondrian_10, preds_mondrian_5, preds_iso, preds_cond, preds_marg))
nmethod <- nrow(all_preds) / nrow(preds_bin_10)
all_preds$mu <- rep(data_test$mu, nmethod)
all_preds$Y <- rep(Y_test, nmethod)
all_preds$Z1 <- rep(data_test$Z1, nmethod)
all_preds$Z0 <- rep(data_test$Z0, nmethod)
threshold_upper <- quantile(data_train$Y, 0.8)
threshold_lower <- quantile(data_train$Y, 0.2)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= threshold_lower) * 1 * (upper <= threshold_upper)
return(treatment)
}
all_preds$A <- treatment_rule(all_preds$f, all_preds$lower, all_preds$upper)
all_preds$Y <- rep(data_test$Y , nmethod)
# Extract bins for differences in the conditional variance.
sigma2 <- data_test$sigma2
bins_hetero <- findInterval(sigma2, quantile(sigma2, seq(0, 1 , length = 6)), all.inside = TRUE)
all_preds$bin <- rep(bins_hetero, nmethod)
setkey(all_preds, method, bin)
print(dim(all_preds))
all_preds <- all_preds[!is.na(all_preds$lower) & !is.na(all_preds$upper),]
print(dim(all_preds))
results_by_hetero <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
)
, by = c("method","bin")]
results_marginal <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
),
, by = c("method")]
results_marginal$bin <- "marginal"
results_marginal <- results_marginal[, names(results_by_hetero), with = FALSE]
results <- rbindlist(list(results_marginal, results_by_hetero))
setkey(results, bin, method)
results
preds_mondrian_5
preds_mondrian_10
source("~/repositories/conformal/scripts/sim_helpers.R")
preds_mondrian_10 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 10)
preds_mondrian_10
preds_mondrian_5 <- do_conformal_mondrian(X_cal, Y_cal, X_test, predictor, alpha = alpha, nbin = 5)
preds_oracle$method <- "oracle"
preds_bin_10$method <- "cal_binning_10"
preds_bin_5$method <- "cal_binning_5"
preds_iso$method <- "isotonic"
preds_cond$method <- "conditional"
preds_marg$method <- "marginal"
preds_mondrian_5$method <- "mondrian_5"
preds_mondrian_10$method <- "mondrian_10"
all_preds <- rbindlist(list(preds_oracle, preds_bin_10, preds_bin_5, preds_mondrian_10, preds_mondrian_5, preds_iso, preds_cond, preds_marg))
nmethod <- nrow(all_preds) / nrow(preds_bin_10)
all_preds$mu <- rep(data_test$mu, nmethod)
all_preds$Y <- rep(Y_test, nmethod)
all_preds$Z1 <- rep(data_test$Z1, nmethod)
all_preds$Z0 <- rep(data_test$Z0, nmethod)
threshold_upper <- quantile(data_train$Y, 0.8)
threshold_lower <- quantile(data_train$Y, 0.2)
treatment_rule <- function(f, lower, upper){
# high risk, so only treat if above threshold.
treatment <- 1- 1*(lower >= threshold_lower) * 1 * (upper <= threshold_upper)
return(treatment)
}
all_preds$A <- treatment_rule(all_preds$f, all_preds$lower, all_preds$upper)
all_preds$Y <- rep(data_test$Y , nmethod)
# Extract bins for differences in the conditional variance.
sigma2 <- data_test$sigma2
bins_hetero <- findInterval(sigma2, quantile(sigma2, seq(0, 1 , length = 6)), all.inside = TRUE)
all_preds$bin <- rep(bins_hetero, nmethod)
setkey(all_preds, method, bin)
print(dim(all_preds))
all_preds <- all_preds[!is.na(all_preds$lower) & !is.na(all_preds$upper),]
print(dim(all_preds))
results_by_hetero <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
)
, by = c("method","bin")]
results_marginal <- all_preds[, .(coverage = mean(Y >= lower & Y <= upper), width = mean(width),
risk = mean((Z1 * A + Z0 * (1-A))),
rmse = sqrt(mean((f - mu)^2)),
cal_error = compute_calibration_error(f, Y)
),
, by = c("method")]
results_marginal$bin <- "marginal"
results_marginal <- results_marginal[, names(results_by_hetero), with = FALSE]
results <- rbindlist(list(results_marginal, results_by_hetero))
setkey(results, bin, method)
results
plot(preds_mondrian_10$f, preds_mondrian_10$width)
library(data.table)
library(ggplot2)
out <- rbindlist(lapply(c(3), function(shape) {
data <- fread(paste0("results/sims_calibration_1000_xg_5_0.1_", shape, "_0.6.csv"))
data$shape <- shape
data
}))
out <- out[out$method %in% c("cal_binning_5", "mondrian_5", "marginal", "isotonic", "conditional")]
out
